<channel version="3.3.2">
  <id>2fc17d7f-cc91-4bd2-b9b6-12f5d08f3993</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>Middleware</name>
  <description></description>
  <enabled>true</enabled>
  <lastModified>
    <time>1458415908446</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>43</revision>
  <sourceConnector version="3.3.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.3.2">
      <pluginProperties/>
      <sourceConnectorProperties version="3.3.2">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <resourceIds class="singleton-set">
          <string>Default Resource</string>
        </resourceIds>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.3.2">
      <steps/>
      <inboundDataType>JSON</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.3.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.3.2">
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.3.2">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.3.2">
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.3.2">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.3.2">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.3.2">
        <pluginProperties/>
        <destinationConnectorProperties version="3.3.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="singleton-set">
            <string>Default Resource</string>
          </resourceIds>
        </destinationConnectorProperties>
        <channelId>0d9da279-0a62-4490-82ce-9378432da068</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables>
          <string>from</string>
        </mapVariables>
      </properties>
      <transformer version="3.3.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.3.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.3.2">
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.3.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.3.2">
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.3.2">
        <steps/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.3.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.3.2">
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.3.2">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.3.2">
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.3.2">
        <rules/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
logger.info(&apos;Middleware received: &apos; + message.toString());

////////////extractor////////////

/*message is the data we received from petal server*/
var jsObj = extractPetaldata(message);

/*then jsObj is the JSON object extracted from message */

////////////transformer////////////

var transformed = petal2BBM(jsObj);

////////////builder////////////

/* convert modified data to String and update this String to message*/
message = buildBBMData(transformed);

/*to BBMSender*/

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(&apos;Middleware post process: &apos; + message.toString());
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
logger.info(&apos;Test02 deploy&apos;);
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
logger.info(&apos;Test02 undeploy&apos;);
return;</undeployScript>
  <properties version="3.3.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns/>
    <attachmentProperties>
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-set">
      <string>Default Resource</string>
    </resourceIds>
  </properties>
  <codeTemplateLibraries>
    <codeTemplateLibrary version="3.3.2">
      <id>52b91e1a-68af-4ed6-a74f-47916d5ad555</id>
      <name>Petal2BBM</name>
      <revision>6</revision>
      <lastModified>
        <time>1458414382335</time>
        <timezone>America/New_York</timezone>
      </lastModified>
      <description>XML-JSON</description>
      <includeNewChannels>true</includeNewChannels>
      <enabledChannelIds>
        <string>0d9da279-0a62-4490-82ce-9378432da068</string>
        <string>2fc17d7f-cc91-4bd2-b9b6-12f5d08f3993</string>
      </enabledChannelIds>
      <disabledChannelIds/>
      <codeTemplates>
        <codeTemplate version="3.3.2">
          <id>5df1aab8-a291-4a0f-b221-b30a891ee655</id>
          <name>xml2json</name>
          <revision>2</revision>
          <lastModified>
            <time>1458414241277</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
            </delegate>
          </contextSet>
          <code>/*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/

 Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

(function (root, factory) {
     if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {
         define([], factory);
     } else if (typeof exports === &quot;object&quot;) {
         module.exports = factory();
     } else {
         root.X2JS = factory();
     }
 }(this, function () {
	return function (config) {
		&apos;use strict&apos;;
			
		var VERSION = &quot;1.2.0&quot;;
		
		config = config || {};
		initConfigDefaults();
		initRequiredPolyfills();
		
		function initConfigDefaults() {
			if(config.escapeMode === undefined) {
				config.escapeMode = true;
			}
			
			config.attributePrefix = config.attributePrefix || &quot;_&quot;;
			config.arrayAccessForm = config.arrayAccessForm || &quot;none&quot;;
			config.emptyNodeForm = config.emptyNodeForm || &quot;text&quot;;		
			
			if(config.enableToStringFunc === undefined) {
				config.enableToStringFunc = true; 
			}
			config.arrayAccessFormPaths = config.arrayAccessFormPaths || []; 
			if(config.skipEmptyTextNodesForObj === undefined) {
				config.skipEmptyTextNodesForObj = true;
			}
			if(config.stripWhitespaces === undefined) {
				config.stripWhitespaces = true;
			}
			config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];
	
			if(config.useDoubleQuotes === undefined) {
				config.useDoubleQuotes = false;
			}
			
			config.xmlElementsFilter = config.xmlElementsFilter || [];
			config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];
			
			if(config.keepCData === undefined) {
				config.keepCData = false;
			}
		}
	
		var DOMNodeTypes = {
			ELEMENT_NODE 	   : 1,
			TEXT_NODE    	   : 3,
			CDATA_SECTION_NODE : 4,
			COMMENT_NODE	   : 8,
			DOCUMENT_NODE 	   : 9
		};
		
		function initRequiredPolyfills() {		
		}
		
		function getNodeLocalName( node ) {
			var nodeLocalName = node.localName;			
			if(nodeLocalName == null) // Yeah, this is IE!! 
				nodeLocalName = node.baseName;
			if(nodeLocalName == null || nodeLocalName==&quot;&quot;) // ==&quot;&quot; is IE too
				nodeLocalName = node.nodeName;
			return nodeLocalName;
		}
		
		function getNodePrefix(node) {
			return node.prefix;
		}
			
		function escapeXmlChars(str) {
			if(typeof(str) == &quot;string&quot;)
				return str.replace(/&amp;/g, &apos;&amp;amp;&apos;).replace(/&lt;/g, &apos;&amp;lt;&apos;).replace(/&gt;/g, &apos;&amp;gt;&apos;).replace(/&quot;/g, &apos;&amp;quot;&apos;).replace(/&apos;/g, &apos;&amp;apos;&apos;);
			else
				return str;
		}
	
		function unescapeXmlChars(str) {
			return str.replace(/&amp;lt;/g, &apos;&lt;&apos;).replace(/&amp;gt;/g, &apos;&gt;&apos;).replace(/&amp;quot;/g, &apos;&quot;&apos;).replace(/&amp;apos;/g, &quot;&apos;&quot;).replace(/&amp;amp;/g, &apos;&amp;&apos;);
		}
		
		function checkInStdFiltersArrayForm(stdFiltersArrayForm, obj, name, path) {
			var idx = 0;
			for(; idx &lt; stdFiltersArrayForm.length; idx++) {
				var filterPath = stdFiltersArrayForm[idx];
				if( typeof filterPath === &quot;string&quot; ) {
					if(filterPath == path)
						break;
				}
				else
				if( filterPath instanceof RegExp) {
					if(filterPath.test(path))
						break;
				}				
				else
				if( typeof filterPath === &quot;function&quot;) {
					if(filterPath(obj, name, path))
						break;
				}
			}
			return idx!=stdFiltersArrayForm.length;
		}
		
		function toArrayAccessForm(obj, childName, path) {
			switch(config.arrayAccessForm) {
				case &quot;property&quot;:
					if(!(obj[childName] instanceof Array))
						obj[childName+&quot;_asArray&quot;] = [obj[childName]];
					else
						obj[childName+&quot;_asArray&quot;] = obj[childName];
					break;
				/*case &quot;none&quot;:
					break;*/
			}
			
			if(!(obj[childName] instanceof Array) &amp;&amp; config.arrayAccessFormPaths.length &gt; 0) {
				if(checkInStdFiltersArrayForm(config.arrayAccessFormPaths, obj, childName, path)) {
					obj[childName] = [obj[childName]];
				}			
			}
		}
		
		function fromXmlDateTime(prop) {
			// Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
			// Improved to support full spec and optional parts
			var bits = prop.split(/[-T:+Z]/g);
			
			var d = new Date(bits[0], bits[1]-1, bits[2]);			
			var secondBits = bits[5].split(&quot;\.&quot;);
			d.setHours(bits[3], bits[4], secondBits[0]);
			if(secondBits.length&gt;1)
				d.setMilliseconds(secondBits[1]);
	
			// Get supplied time zone offset in minutes
			if(bits[6] &amp;&amp; bits[7]) {
				var offsetMinutes = bits[6] * 60 + Number(bits[7]);
				var sign = /\d\d-\d\d:\d\d$/.test(prop)? &apos;-&apos; : &apos;+&apos;;
	
				// Apply the sign
				offsetMinutes = 0 + (sign == &apos;-&apos;? -1 * offsetMinutes : offsetMinutes);
	
				// Apply offset and local timezone
				d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())
			}
			else
				if(prop.indexOf(&quot;Z&quot;, prop.length - 1) !== -1) {
					d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));					
				}
	
			// d is now a local time equivalent to the supplied time
			return d;
		}
		
		function checkFromXmlDateTimePaths(value, childName, fullPath) {
			if(config.datetimeAccessFormPaths.length &gt; 0) {
				var path = fullPath.split(&quot;\.#&quot;)[0];
				if(checkInStdFiltersArrayForm(config.datetimeAccessFormPaths, value, childName, path)) {
					return fromXmlDateTime(value);
				}
				else
					return value;			
			}
			else
				return value;
		}
		
		function checkXmlElementsFilter(obj, childType, childName, childPath) {
			if( childType == DOMNodeTypes.ELEMENT_NODE &amp;&amp; config.xmlElementsFilter.length &gt; 0) {
				return checkInStdFiltersArrayForm(config.xmlElementsFilter, obj, childName, childPath);	
			}
			else
				return true;
		}	
	
		function parseDOMChildren( node, path ) {
			if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
				var result = new Object;
				var nodeChildren = node.childNodes;
				// Alternative for firstElementChild which is not supported in some environments
				for(var cidx=0; cidx &lt;nodeChildren.length; cidx++) {
					var child = nodeChildren.item(cidx);
					if(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {
						var childName = getNodeLocalName(child);
						result[childName] = parseDOMChildren(child, childName);
					}
				}
				return result;
			}
			else
			if(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
				var result = new Object;
				result.__cnt=0;
				
				var nodeChildren = node.childNodes;
				
				// Children nodes
				for(var cidx=0; cidx &lt;nodeChildren.length; cidx++) {
					var child = nodeChildren.item(cidx); // nodeChildren[cidx];
					var childName = getNodeLocalName(child);
					
					if(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {
						var childPath = path+&quot;.&quot;+childName;
						if (checkXmlElementsFilter(result,child.nodeType,childName,childPath)) {
							result.__cnt++;
							if(result[childName] == null) {
								result[childName] = parseDOMChildren(child, childPath);
								toArrayAccessForm(result, childName, childPath);					
							}
							else {
								if(result[childName] != null) {
									if( !(result[childName] instanceof Array)) {
										result[childName] = [result[childName]];
										toArrayAccessForm(result, childName, childPath);
									}
								}
								(result[childName])[result[childName].length] = parseDOMChildren(child, childPath);
							}
						}
					}								
				}
				
				// Attributes
				for(var aidx=0; aidx &lt;node.attributes.length; aidx++) {
					var attr = node.attributes.item(aidx); // [aidx];
					result.__cnt++;
					result[config.attributePrefix+attr.name]=attr.value;
				}
				
				// Node namespace prefix
				var nodePrefix = getNodePrefix(node);
				if(nodePrefix!=null &amp;&amp; nodePrefix!=&quot;&quot;) {
					result.__cnt++;
					result.__prefix=nodePrefix;
				}
				
				if(result[&quot;#text&quot;]!=null) {				
					result.__text = result[&quot;#text&quot;];
					if(result.__text instanceof Array) {
						result.__text = result.__text.join(&quot;\n&quot;);
					}
					//if(config.escapeMode)
					//	result.__text = unescapeXmlChars(result.__text);
					if(config.stripWhitespaces)
						result.__text = result.__text.trim();
					delete result[&quot;#text&quot;];
					if(config.arrayAccessForm==&quot;property&quot;)
						delete result[&quot;#text_asArray&quot;];
					result.__text = checkFromXmlDateTimePaths(result.__text, childName, path+&quot;.&quot;+childName);
				}
				if(result[&quot;#cdata-section&quot;]!=null) {
					result.__cdata = result[&quot;#cdata-section&quot;];
					delete result[&quot;#cdata-section&quot;];
					if(config.arrayAccessForm==&quot;property&quot;)
						delete result[&quot;#cdata-section_asArray&quot;];
				}
				
				if( result.__cnt == 0 &amp;&amp; config.emptyNodeForm==&quot;text&quot; ) {
					result = &apos;&apos;;
				}
				else
				if( result.__cnt == 1 &amp;&amp; result.__text!=null  ) {
					result = result.__text;
				}
				else
				if( result.__cnt == 1 &amp;&amp; result.__cdata!=null &amp;&amp; !config.keepCData  ) {
					result = result.__cdata;
				}			
				else			
				if ( result.__cnt &gt; 1 &amp;&amp; result.__text!=null &amp;&amp; config.skipEmptyTextNodesForObj) {
					if( (config.stripWhitespaces &amp;&amp; result.__text==&quot;&quot;) || (result.__text.trim()==&quot;&quot;)) {
						delete result.__text;
					}
				}
				delete result.__cnt;			
				
				if( config.enableToStringFunc &amp;&amp; (result.__text!=null || result.__cdata!=null )) {
					result.toString = function() {
						return (this.__text!=null? this.__text:&apos;&apos;)+( this.__cdata!=null ? this.__cdata:&apos;&apos;);
					};
				}
				
				return result;
			}
			else
			if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {
				return node.nodeValue;
			}	
		}
		
		function startTag(jsonObj, element, attrList, closed) {
			var resultStr = &quot;&lt;&quot;+ ( (jsonObj!=null &amp;&amp; jsonObj.__prefix!=null)? (jsonObj.__prefix+&quot;:&quot;):&quot;&quot;) + element;
			if(attrList!=null) {
				for(var aidx = 0; aidx &lt; attrList.length; aidx++) {
					var attrName = attrList[aidx];
					var attrVal = jsonObj[attrName];
					if(config.escapeMode)
						attrVal=escapeXmlChars(attrVal);
					resultStr+=&quot; &quot;+attrName.substr(config.attributePrefix.length)+&quot;=&quot;;
					if(config.useDoubleQuotes)
						resultStr+=&apos;&quot;&apos;+attrVal+&apos;&quot;&apos;;
					else
						resultStr+=&quot;&apos;&quot;+attrVal+&quot;&apos;&quot;;
				}
			}
			if(!closed)
				resultStr+=&quot;&gt;&quot;;
			else
				resultStr+=&quot;/&gt;&quot;;
			return resultStr;
		}
		
		function endTag(jsonObj,elementName) {
			return &quot;&lt;/&quot;+ (jsonObj.__prefix!=null? (jsonObj.__prefix+&quot;:&quot;):&quot;&quot;)+elementName+&quot;&gt;&quot;;
		}
		
		function endsWith(str, suffix) {
			return str.indexOf(suffix, str.length - suffix.length) !== -1;
		}
		
		function jsonXmlSpecialElem ( jsonObj, jsonObjField ) {
			if((config.arrayAccessForm==&quot;property&quot; &amp;&amp; endsWith(jsonObjField.toString(),(&quot;_asArray&quot;))) 
					|| jsonObjField.toString().indexOf(config.attributePrefix)==0 
					|| jsonObjField.toString().indexOf(&quot;__&quot;)==0
					|| (jsonObj[jsonObjField] instanceof Function) )
				return true;
			else
				return false;
		}
		
		function jsonXmlElemCount ( jsonObj ) {
			var elementsCnt = 0;
			if(jsonObj instanceof Object ) {
				for( var it in jsonObj  ) {
					if(jsonXmlSpecialElem ( jsonObj, it) )
						continue;			
					elementsCnt++;
				}
			}
			return elementsCnt;
		}
		
		function checkJsonObjPropertiesFilter(jsonObj, propertyName, jsonObjPath) {
			return config.jsonPropertiesFilter.length == 0
				|| jsonObjPath==&quot;&quot;
				|| checkInStdFiltersArrayForm(config.jsonPropertiesFilter, jsonObj, propertyName, jsonObjPath);	
		}
		
		function parseJSONAttributes ( jsonObj ) {
			var attrList = [];
			if(jsonObj instanceof Object ) {
				for( var ait in jsonObj  ) {
					if(ait.toString().indexOf(&quot;__&quot;)== -1 &amp;&amp; ait.toString().indexOf(config.attributePrefix)==0) {
						attrList.push(ait);
					}
				}
			}
			return attrList;
		}
		
		function parseJSONTextAttrs ( jsonTxtObj ) {
			var result =&quot;&quot;;
			
			if(jsonTxtObj.__cdata!=null) {										
				result+=&quot;&lt;![CDATA[&quot;+jsonTxtObj.__cdata+&quot;]]&gt;&quot;;					
			}
			
			if(jsonTxtObj.__text!=null) {			
				if(config.escapeMode)
					result+=escapeXmlChars(jsonTxtObj.__text);
				else
					result+=jsonTxtObj.__text;
			}
			return result;
		}
		
		function parseJSONTextObject ( jsonTxtObj ) {
			var result =&quot;&quot;;
	
			if( jsonTxtObj instanceof Object ) {
				result+=parseJSONTextAttrs ( jsonTxtObj );
			}
			else
				if(jsonTxtObj!=null) {
					if(config.escapeMode)
						result+=escapeXmlChars(jsonTxtObj);
					else
						result+=jsonTxtObj;
				}
			
			return result;
		}
		
		function getJsonPropertyPath(jsonObjPath, jsonPropName) {
			if (jsonObjPath===&quot;&quot;) {
				return jsonPropName;
			}
			else
				return jsonObjPath+&quot;.&quot;+jsonPropName;
		}
		
		function parseJSONArray ( jsonArrRoot, jsonArrObj, attrList, jsonObjPath ) {
			var result = &quot;&quot;; 
			if(jsonArrRoot.length == 0) {
				result+=startTag(jsonArrRoot, jsonArrObj, attrList, true);
			}
			else {
				for(var arIdx = 0; arIdx &lt; jsonArrRoot.length; arIdx++) {
					result+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);
					result+=parseJSONObject(jsonArrRoot[arIdx], getJsonPropertyPath(jsonObjPath,jsonArrObj));
					result+=endTag(jsonArrRoot[arIdx],jsonArrObj);
				}
			}
			return result;
		}
		
		function parseJSONObject ( jsonObj, jsonObjPath ) {
			var result = &quot;&quot;;	
	
			var elementsCnt = jsonXmlElemCount ( jsonObj );
			
			if(elementsCnt &gt; 0) {
				for( var it in jsonObj ) {
					
					if(jsonXmlSpecialElem ( jsonObj, it) || (jsonObjPath!=&quot;&quot; &amp;&amp; !checkJsonObjPropertiesFilter(jsonObj, it, getJsonPropertyPath(jsonObjPath,it))) )
						continue;			
					
					var subObj = jsonObj[it];						
					
					var attrList = parseJSONAttributes( subObj )
					
					if(subObj == null || subObj == undefined) {
						result+=startTag(subObj, it, attrList, true);
					}
					else
					if(subObj instanceof Object) {
						
						if(subObj instanceof Array) {					
							result+=parseJSONArray( subObj, it, attrList, jsonObjPath );					
						}
						else if(subObj instanceof Date) {
							result+=startTag(subObj, it, attrList, false);
							result+=subObj.toISOString();
							result+=endTag(subObj,it);
						}
						else {
							var subObjElementsCnt = jsonXmlElemCount ( subObj );
							if(subObjElementsCnt &gt; 0 || subObj.__text!=null || subObj.__cdata!=null) {
								result+=startTag(subObj, it, attrList, false);
								result+=parseJSONObject(subObj, getJsonPropertyPath(jsonObjPath,it));
								result+=endTag(subObj,it);
							}
							else {
								result+=startTag(subObj, it, attrList, true);
							}
						}
					}
					else {
						result+=startTag(subObj, it, attrList, false);
						result+=parseJSONTextObject(subObj);
						result+=endTag(subObj,it);
					}
				}
			}
			result+=parseJSONTextObject(jsonObj);
			
			return result;
		}
		
		this.parseXmlString = function(xmlDocStr) {
			var isIEParser = window.ActiveXObject || &quot;ActiveXObject&quot; in window;
			if (xmlDocStr === undefined) {
				return null;
			}
			var xmlDoc;
			if (window.DOMParser) {
				var parser=new window.DOMParser();			
				var parsererrorNS = null;
				// IE9+ now is here
				if(!isIEParser) {
					try {
						parsererrorNS = parser.parseFromString(&quot;INVALID&quot;, &quot;text/xml&quot;).getElementsByTagName(&quot;parsererror&quot;)[0].namespaceURI;
					}
					catch(err) {					
						parsererrorNS = null;
					}
				}
				try {
					xmlDoc = parser.parseFromString( xmlDocStr, &quot;text/xml&quot; );
					if( parsererrorNS!= null &amp;&amp; xmlDoc.getElementsByTagNameNS(parsererrorNS, &quot;parsererror&quot;).length &gt; 0) {
						//throw new Error(&apos;Error parsing XML: &apos;+xmlDocStr);
						xmlDoc = null;
					}
				}
				catch(err) {
					xmlDoc = null;
				}
			}
			else {
				// IE :(
				if(xmlDocStr.indexOf(&quot;&lt;?&quot;)==0) {
					xmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf(&quot;?&gt;&quot;) + 2 );
				}
				xmlDoc=new ActiveXObject(&quot;Microsoft.XMLDOM&quot;);
				xmlDoc.async=&quot;false&quot;;
				xmlDoc.loadXML(xmlDocStr);
			}
			return xmlDoc;
		};
		
		this.asArray = function(prop) {
			if (prop === undefined || prop == null)
				return [];
			else
			if(prop instanceof Array)
				return prop;
			else
				return [prop];
		};
		
		this.toXmlDateTime = function(dt) {
			if(dt instanceof Date)
				return dt.toISOString();
			else
			if(typeof(dt) === &apos;number&apos; )
				return new Date(dt).toISOString();
			else	
				return null;
		};
		
		this.asDateTime = function(prop) {
			if(typeof(prop) == &quot;string&quot;) {
				return fromXmlDateTime(prop);
			}
			else
				return prop;
		};
	
		this.xml2json = function (xmlDoc) {
			return parseDOMChildren ( xmlDoc );
		};
		
		this.xml_str2json = function (xmlDocStr) {
			var xmlDoc = this.parseXmlString(xmlDocStr);
			if(xmlDoc!=null)
				return this.xml2json(xmlDoc);
			else
				return null;
		};
	
		this.json2xml_str = function (jsonObj) {
			return parseJSONObject ( jsonObj, &quot;&quot; );
		};
	
		this.json2xml = function (jsonObj) {
			var xmlDocStr = this.json2xml_str (jsonObj);
			return this.parseXmlString(xmlDocStr);
		};
		
		this.getVersion = function () {
			return VERSION;
		};	
	}
}))</code>
        </codeTemplate>
        <codeTemplate version="3.3.2">
          <id>db715c66-e29d-48a4-be12-605cf51190ac</id>
          <name>PetalScheduleExtractor</name>
          <revision>4</revision>
          <lastModified>
            <time>1458414355867</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
            </delegate>
          </contextSet>
          <code>function extractPetaldata(petalMsg){
    return JSON.parse(petalMsg);
}</code>
        </codeTemplate>
        <codeTemplate version="3.3.2">
          <id>828639e9-f625-4f7a-842b-d419e67bc5c5</id>
          <name>BBMDataBuilder</name>
          <revision>3</revision>
          <lastModified>
            <time>1458414314629</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
            </delegate>
          </contextSet>
          <code>function buildBBMData(transformedData){
    return JSON.stringify(transformedData);
}</code>
        </codeTemplate>
        <codeTemplate version="3.3.2">
          <id>6b820b3b-4c01-4d4b-81cd-6812ddc2d33a</id>
          <name>PetalBBMTransformer</name>
          <revision>4</revision>
          <lastModified>
            <time>1458414364861</time>
            <timezone>America/New_York</timezone>
          </lastModified>
          <type>FUNCTION</type>
          <contextSet>
            <delegate>
              <contextType>CHANNEL_BATCH</contextType>
              <contextType>CHANNEL_DEPLOY</contextType>
              <contextType>CHANNEL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
              <contextType>GLOBAL_POSTPROCESSOR</contextType>
              <contextType>DESTINATION_DISPATCHER</contextType>
              <contextType>GLOBAL_DEPLOY</contextType>
              <contextType>SOURCE_RECEIVER</contextType>
              <contextType>GLOBAL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_PREPROCESSOR</contextType>
              <contextType>CHANNEL_UNDEPLOY</contextType>
              <contextType>GLOBAL_UNDEPLOY</contextType>
              <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              <contextType>CHANNEL_ATTACHMENT</contextType>
            </delegate>
          </contextSet>
          <code>function petal2BBM(jsObj){
    jsObj[&quot;transformed&quot;] = &quot;transformed&quot;;
    return jsObj;
}</code>
        </codeTemplate>
      </codeTemplates>
    </codeTemplateLibrary>
  </codeTemplateLibraries>
</channel>